
services:
  # ClientService
  client-service:
    build:
      context: ./services/client-service/ClientService
      dockerfile: Dockerfile
    container_name: client-service
    ports:
      - "8000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - DOTNET_RUNNING_IN_CONTAINER=true
      - ConnectionStrings__DefaultConnection=Host=db;Port=5432;Username=${DB_USER};Password=${DB_PASSWORD};Database=${DB_NAME}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - tcc-network

  # Banco do ClientService
  db:
    image: postgres:15
    container_name: client-db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: mariaclient201
    ports:
      - "5434:5432"  # porta host:container
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/client-service/docker-initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 5s
      retries: 10
      start_period: 10s
    networks:
      - tcc-network


  # ProductService
  product-service:
    build:
      context: ./services/product-service/ProductService
      dockerfile: Dockerfile
    container_name: product-service
    ports:
      - "8002:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ConnectionStrings__DefaultConnection=Host=product-db;Port=5432;Username=${PRODUCT_DB_USER};Password=${PRODUCT_DB_PASSWORD};Database=${PRODUCT_DB_NAME}
    depends_on:
      product-db:
        condition: service_healthy
    networks:
      - tcc-network

  # Banco do ProductService
  product-db:
    image: postgres:15
    container_name: product-db
    restart: always
    environment:
      POSTGRES_USER: ${PRODUCT_DB_USER}
      POSTGRES_PASSWORD: ${PRODUCT_DB_PASSWORD}
      POSTGRES_DB: mariaproduct201
    ports:
      - "5435:5432"  # porta host:container
    volumes:
      - product_data:/var/lib/postgresql/data
      - ./services/product-service/docker-initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PRODUCT_DB_USER}"]
      interval: 5s
      retries: 10
      start_period: 10s
    networks:
      - tcc-network

  # CurrencyService
  currency-service:
    build:
      context: ./services/currency-service/CurrencyService
      dockerfile: Dockerfile
    container_name: currency-service
    ports:
      - "5000:8080"  # porta container:porta host
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - DOTNET_RUNNING_IN_CONTAINER=true
      - CurrencyApiUrl=https://economia.awesomeapi.com.br/all

    volumes:
      - ./services/currency-service/logs:/app/Logs  # ðŸ”¹ volume mapeado no host
    networks:
      - tcc-network
# -------------------------------
# Volumes persistentes
volumes:
  postgres_data:
  product_data:

# -------------------------------
# Rede para comunicaÃ§Ã£o
networks:
  tcc-network:
    driver: bridge
