services:

  # ClientService
  client-service:
    build:
      context: ./services/client-service
      dockerfile: ClientService/Dockerfile
    ports:
      - "8080:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - DOTNET_RUNNING_IN_CONTAINER=true
      - CLIENT_DB_HOST=client-db
      - CLIENT_DB_PORT=5432
      - CLIENT_DB_USER=${CLIENT_DB_USER}
      - CLIENT_DB_PASSWORD=${CLIENT_DB_PASSWORD}
      - CLIENT_DB_NAME=${CLIENT_DB_NAME}
    depends_on:
      - client-db
    networks:
      - tcc-network

  client-db:
    image: postgres:15
    container_name: client-db
    restart: always
    environment:
      POSTGRES_USER: ${CLIENT_DB_USER}
      POSTGRES_PASSWORD: ${CLIENT_DB_PASSWORD}
      POSTGRES_DB: ${CLIENT_DB_NAME}
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/client-service/docker-initdb:/docker-entrypoint-initdb.d
      - ./services/client-service/logs:/app/Logs
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CLIENT_DB_USER}"]
      interval: 5s
      retries: 10
      start_period: 30s
    networks:
      - tcc-network

  # ProductService
  product-service:
    build:
      context: ./services/product-service/ProductService
      dockerfile: Dockerfile
    ports:
      - "8002:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - DOTNET_RUNNING_IN_CONTAINER=true 
      - PRODUCT_DB_USER=${PRODUCT_DB_USER}
      - PRODUCT_DB_PASSWORD=${PRODUCT_DB_PASSWORD}
      - PRODUCT_DB_NAME=${PRODUCT_DB_NAME}
      - PRODUCT_DB_HOST=product-db
      - PRODUCT_DB_PORT=5432  
    depends_on:
      - product-db
    networks:
      - tcc-network

  product-db:
    image: postgres:15
    container_name: product-db
    restart: always
    environment:
      POSTGRES_USER: ${PRODUCT_DB_USER}
      POSTGRES_PASSWORD: ${PRODUCT_DB_PASSWORD}
      POSTGRES_DB: ${PRODUCT_DB_NAME}
    ports:
      - "5435:5432"
    volumes:
      - product_data:/var/lib/postgresql/data
      - ./services/product-service/docker-initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PRODUCT_DB_USER}"]
      interval: 5s
      retries: 10
      start_period: 10s
    networks:
      - tcc-network

  # CurrencyService
  currency-service:
    build:
      context: ./services/currency-service/CurrencyService
      dockerfile: Dockerfile
    container_name: currency-service
    ports:
      - "5000:5000"
    dns:
      - 8.8.8.8
      - 8.8.4.4
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - DOTNET_RUNNING_IN_CONTAINER=true
      - CurrencyApiUrl=${CurrencyApiUrl}
    volumes:
      - ./services/currency-service/logs:/app/Logs
    networks:
      - tcc-network

  # CartService
  cart-service:
    build:
      context: ./services/cart-service/CartService
      dockerfile: Dockerfile
    ports:
      - "8084:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - DOTNET_RUNNING_IN_CONTAINER=true
      - CART_DB_HOST=cart-db
      - CART_DB_PORT=5432
      - CART_DB_USER=${CART_DB_USER}
      - CART_DB_PASSWORD=${CART_DB_PASSWORD}
      - CART_DB_NAME=${CART_DB_NAME}
    depends_on:
      - cart-db
    networks:
      - tcc-network

  cart-db:
    image: postgres:15
    container_name: cart-db
    restart: always
    environment:
      POSTGRES_USER: ${CART_DB_USER}
      POSTGRES_PASSWORD: ${CART_DB_PASSWORD}
      POSTGRES_DB: ${CART_DB_NAME}
    ports:
      - "5436:5432"
    volumes:
      - cart_data:/var/lib/postgresql/data
      - ./services/cart-service/CartService/docker-initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CART_DB_USER}"]
      interval: 5s
      retries: 10
      start_period: 10s
    networks:
      - tcc-network

  # Caddy reverse-proxy
  caddy:
    image: caddy:2
    container_name: caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - client-service
      - product-service
      - currency-service
      - cart-service
    networks:
      - tcc-network

volumes:
  postgres_data:
  product_data:
  cart_data:
  caddy_data:
  caddy_config:

networks:
  tcc-network:
    driver: bridge
